CS 97 Assignment 5: Notes and Explanations
Julia Yin, Fall 2020

Project Notes:
1. Implemented make check in the Makefile by checking that the output of
   ./randall 100 is of length 100 bytes, and printing out an error message
   if the output of randall is not equal to the correct size.
2. Split output.c and output.h from the original randall.c file to include
   the writebytes function. Placed function prototype and header guards
   into output.h as well as the required include files. Tested by linking
   randall.c and output.c using gcc to see if randall would execute correctly.
3. Split rand64-hw.c rand64-hw.h from randall.c to include the cpuid struct
   and the cpuid, rdrand_supported, hardware_rand64_init, hardware_rand64,
   and hardware_rand64_fini functions.
4. Split rand64-sw.c rand64-sw.h from randall.c to include urandstream and
   the software_rand64_init, software_rand64, and software_rand64_fini
   functions.
5. Split options.c options.h from randall.c to include all code relating to
   options processing. Created a new function process_options that takes in
   the arguments and modifies the values of nytes, input, and output based
   on the options processing.
   a. Used getopt to perform the options processing for -i and -o
   b. Added checks at the end to read in the nbytes value from argv as it's
      not included as an option for getopt
6. Implemented the -i rdrand option in randall.c by having a series of if
   statements checking for the value of input (modified by process_options).
   If input == "rdrand", assign the initialize, rand64, and finalize function
   pointers to the hardware rand64 implementations.
7. Implemented the -i mrand48_r option by creating two files mrand48_r.c and
   mrand48_r.h to store the initialize, rand, and finalize functions. If
   input == "mrand48_r", assign the init, rand64, and finalize function
   pointers to  the mrand48_r rand64 implementations.
   a. For mrand48 init, generated the seed for the buffer and assigned it using
      srand48_r.
   b. For mrand48 rand, used mrand48_r to generate two 4-byte (32 bit) values
      using the same buffer, then appended them together using bit manipulation
      and returned the resulting 8-byte (64 bit) value as the random result.
8. Implemented the -i /F option by altering each implementation's initialize
   function to take a c-string (char *) as an argument. In randall.c, changed
   the initialize function call to call initialize with /dev/random if no
   valid file was passed in or if input was empty, and /F if a valid file was
   passed in and stored in input.
   a. Modified the software implementation's rand64 initialize function to set
      the file to be read in as the file argument passed in.
9. Modified randall.c to include the -o N option. If the output is null (0)
   or the output contains "stdio", generate and write out the random bytes
   using the default, original method. Else, perform the -o N option.
   a. First, generate a buffer containing N KiB, or N*1024 bytes. Use malloc
      to create a char buffer of N KiB size. Check that malloc succeeded and
      returned a non-null value, and return 1 if failed.
   b. While there are still bytes to write, generate the current allocation
      size by taking the minimum of buffer size and the number of bytes.
      Divide the allocation size by 8 to calculate the number of rand64 calls
      needed to generate the sufficient number of random bytes.
   c. Write a function write_bytes that takes in a buffer, the number of bytes
      to write into the buffer, and a random 64-bit value x generated by a
      rand64 function call. write_bytes will write the specified number of
      bytes from x into the end of the buffer.
   d. Check for remainders, e.g. if the number of bytes to write is not a
      multiple of 8. This can only happen if allocate size is not the buffer
      size and if whatever's left of nbytes after multiple write calls. If
      allocate_size has a remainder after % 8, write out those leftover bytes.
   e. Finally, use the write system call function to write the contents of the
      buffer to standard output and subtract the allocation size from the
      total number of bytes. Repeat until nbytes reaches 0.
   f. Once all the bytes have been written out, free the buffer memory. 
10.Added more test cases to test.sh to test various combinations of the added
   options. Added comments and error checks within randall.c and options.c
   that report errors to stderr and return 1.

Testing Notes:
Overall, my randall implementation seems to be around 2-4 times slower than the system
rand64 implementation (first test), but is still relatively quick to generate the
random bytes. I'm not quite sure why there's such a big difference between the real,
user, and sys times, and why the differences vary with each test. Overall, using
/dev/urandom as the source of random data seems to be the quickest way to generate
random bytes with my randall implementation.

time dd if=/dev/urandom ibs=8192 obs=8192 count=16384 >/dev/null
real	0m0.968s
user	0m0.021s
sys	0m0.947s

time ./randall 133562368 -i /dev/urandom >/dev/null
real	0m2.613s
user	0m1.699s
sys	0m0.914s

time ./randall 133562368 -i /dev/urandom | cat >/dev/null
real	0m2.761s
user	0m1.791s
sys	0m1.140s

time ./randall 133562368 >/dev/null
real	0m2.989s
user	0m2.975s
sys	0m0.013s

time ./randall 133562368 | cat >/dev/null
real	0m3.168s
user	0m3.139s
sys	0m0.202s

time ./randall 133562368 >rand.data
real	0m4.411s
user	0m3.148s
sys	0m0.169s
